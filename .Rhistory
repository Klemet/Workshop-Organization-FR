extent(reclaRealRoadsRaster)[1]
extent(reclaRealRoadsRaster)[2]
reclaRealRoadsRaster)[1:2]
extent(reclaRealRoadsRaster)[1:2]
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
realRoadPoints[,1]
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints[,1]
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
realRoadPoints
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
simRoadPoints = rasterToPoints(reclaSimRasterTest)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
testNNCross = nncross(realRoadPoints, simRoadPoints)
testNNCross
testNNCross = nncross(simRoadPoints, realRoadPoints)
testNNCross$under500M = testNNCross$dist <= 500
testNNCross
testNNCross$under500M
freq(testNNCross$under500M)
count(testNNCross$under500M)
table(testNNCross$under500M)
library(raster)
library(rgeos)
library(here)
library(spatstat)
print("Detecting current directory...")
# We set the current working directory to where the file is (! DOESNT WORK IN R STUDIO)
# current_folder = here()
current_folder = "D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/"
setwd(current_folder)
# 2.
# Create data frame for results
resultsDF = data.frame(Landscape = character(), Roads_concerned = character(),
Mean_or_SD = character(), Value = character())
colnames(resultsDF) = c("Landscape", "Roads_concerned", "Mean_or_SD", "value")
landscape = "Mauricie"
# Define paths to load rasters for this landscape
pathSharedRasters = paste("./Paysage ", landscape, "/sharedRasters/", sep = "")
pathScenarios = paste("./Paysage ", landscape, "/Scenarios/", sep = "")
# load the management areas raster
if(file.exists(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller.tif", sep = "")))
{
managementAreasRaster = raster(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller.tif", sep = ""))
}  else if (file.exists(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller-Guillemette.tif", sep = "")))
{
managementAreasRaster = raster(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller-Guillemette.tif", sep = ""))
} else { print("FATAL ERROR : COULDN'T FIND THE RASTER OF MANAGEMENT AREAS") }
reclass_vector_road <- c(-1, 0, NA,
0, Inf, 1)
reclass_matrix_road <- matrix(reclass_vector_road,
ncol = 3,
byrow = TRUE)
realRoadsRaster = raster(paste(pathScenarios, "Scenario routes semi-reelles/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclaRealRoadsRaster <- reclassify(realRoadsRaster, reclass_matrix_road)
reclaRealRoadsRaster = setExtent(reclaRealRoadsRaster, managementAreasRaster)
plot(reclaRealRoadsRaster)
plot(managementAreasRaster)
reclassifiedRoadRaster_OutOfMA = mask(reclaRealRoadsRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
plot(reclassifiedRoadRaster_OutOfMA)
reclassifiedRoadRaster_InOfMA = mask(reclaRealRoadsRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
plot(reclassifiedRoadRaster_InOfMA)
simRasterTest = raster("D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/Paysage Mauricie/Scenarios/Scenario routes simulees 1/output/disturbances/roads/roadNetwork-10.tif")
reclaSimRasterTest <- reclassify(simRasterTest, reclass_matrix_road)
reclaSimRasterTest = setExtent(reclaSimRasterTest, managementAreasRaster)
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
simRoadPoints = rasterToPoints(reclaSimRasterTest)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
testNNCross = nncross(simRoadPoints, realRoadPoints)
testNNCross$under500M = testNNCross$dist <= 500
simRoadPoints
simRoadPoints$markformat
simRoadPoints$n
simRoadPoints$x
simRoadPointsnoppp = rasterToPoints(reclaSimRasterTest)
realRoadPointsnoppp = rasterToPoints(reclaRealRoadsRaster)
simRoadPointsnoppp
testNNCross
realRoadPointsnoppp
simRasterTest = raster("D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/Paysage Mauricie/Scenarios/Scenario routes simulees 2/output/disturbances/roads/roadNetwork-10.tif")
simRasterTest = raster("D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/Paysage Mauricie/Scenarios/Scenario routes simulees 2/output/disturbances/roads/roadNetwork-10.tif")
reclaSimRasterTest <- reclassify(simRasterTest, reclass_matrix_road)
reclaSimRasterTest = setExtent(reclaSimRasterTest, managementAreasRaster)
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
simRoadPoints = rasterToPoints(reclaSimRasterTest)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
testNNCross = nncross(simRoadPoints, realRoadPoints)
testNNCross$under500M = testNNCross$dist <= 500
table(testNNCross$under500M)
simRoadPointsnoppp = rasterToPoints(reclaSimRasterTest)
realRoadPointsnoppp = rasterToPoints(reclaRealRoadsRaster)
simRoadPointsnoppp
testNNCross
c(1:10)
replicate = 2
# load the simulated road raster
simRasterTest = raster(paste(pathScenarios, "Scenario routes simulées ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
paste(pathScenarios, "Scenario routes simulées ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = "")
getwd()
# load the simulated road raster
simRasterTest = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
# load the simulated road raster and give it the right reclassification and extent
simRoadRaster = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclasimRoadRaster <- reclassify(simRoadRaster, reclass_matrix_road)
reclasimRoadRaster = setExtent(reclaRealRoadsRaster, managementAreasRaster)
simRoadRaster = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclasimRoadRaster <- reclassify(simRoadRaster, reclass_matrix_road)
reclasimRoadRaster = setExtent(reclaRealRoadsRaster, managementAreasRaster)
# Make a temp raster with Simulated roads out of management areas
reclasimRoadRaster_OutOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
# Make a temp raster with Simulated roads in of management areas
reclasimRoadRaster_InOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
# Make the ppp objects for later use with the nncross function
simRoadPoints = rasterToPoints(reclasimRoadRaster)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
simRoadPoints_OutOfMA = rasterToPoints(reclasimRoadRaster_OutOfMA)
simRoadPoints_OutOfMA = ppp(simRoadPoints_OutOfMA[,1], simRoadPoints_OutOfMA[,2], window = observationWindow)
simRoadPoints_InOfMA = rasterToPoints(reclasimRoadRaster_InOfMA)
simRoadPoints_InOfMA = ppp(simRoadPoints_InOfMA[,1], simRoadPoints_InOfMA[,2], window = observationWindow)
# Use nncross function to get the amount of sim road points that are < 500m from a real road point
crossSimRealRoads = nncross(simRoadPoints, realRoadPoints)
crossSimRealRoads$under500M = crossSimRealRoads$dist <= 500
table(crossSimRealRoads$under500M)
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
realRoadPoints_OutOfMA = rasterToPoints(reclassifiedRoadRaster_OutOfMA)
realRoadPoints_OutOfMA = ppp(realRoadPoints_OutOfMA[,1], realRoadPoints_OutOfMA[,2], window = observationWindow)
realRoadPoints_InOfMA = rasterToPoints(reclassifiedRoadRaster_InOfMA)
realRoadPoints_InOfMA = ppp(realRoadPoints_InOfMA[,1], realRoadPoints_InOfMA[,2], window = observationWindow)
crossSimRealRoads = nncross(simRoadPoints, realRoadPoints)
crossSimRealRoads$under500M = crossSimRealRoads$dist <= 500
table(crossSimRealRoads$under500M)
# load the simulated road raster and give it the right reclassification and extent
simRoadRaster = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclasimRoadRaster <- reclassify(simRoadRaster, reclass_matrix_road)
reclasimRoadRaster = setExtent(reclasimRoadRaster, managementAreasRaster)
# Make a temp raster with Simulated roads out of management areas
reclasimRoadRaster_OutOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
# Make a temp raster with Simulated roads in of management areas
reclasimRoadRaster_InOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
# Make the ppp objects for later use with the nncross function
simRoadPoints = rasterToPoints(reclasimRoadRaster)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
simRoadPoints_OutOfMA = rasterToPoints(reclasimRoadRaster_OutOfMA)
simRoadPoints_OutOfMA = ppp(simRoadPoints_OutOfMA[,1], simRoadPoints_OutOfMA[,2], window = observationWindow)
simRoadPoints_InOfMA = rasterToPoints(reclasimRoadRaster_InOfMA)
simRoadPoints_InOfMA = ppp(simRoadPoints_InOfMA[,1], simRoadPoints_InOfMA[,2], window = observationWindow)
# Use nncross function to get the amount of sim road points that are < 500m from a real road point
crossSimRealRoads = nncross(simRoadPoints, realRoadPoints)
crossSimRealRoads$under500M = crossSimRealRoads$dist <= 500
table(crossSimRealRoads$under500M)
sum(table(crossSimRealRoads$under500M))
frequencies$TRUE
percentageSimUnder500m = frequencies[["TRUE"]] / sum(frequencies)
frequencies = table(crossSimRealRoads$under500M)
frequencies[["TRUE"]]
percentageSimUnder500m = (frequencies[["TRUE"]] / sum(frequencies)) * 100
percentageSimUnder500m
simRoadRaster = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclasimRoadRaster <- reclassify(simRoadRaster, reclass_matrix_road)
reclasimRoadRaster = setExtent(reclasimRoadRaster, managementAreasRaster)
# Make a temp raster with Simulated roads out of management areas
reclasimRoadRaster_OutOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
# Make a temp raster with Simulated roads in of management areas
reclasimRoadRaster_InOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
# Make the ppp objects for later use with the nncross function
simRoadPoints = rasterToPoints(reclasimRoadRaster)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
simRoadPoints_OutOfMA = rasterToPoints(reclasimRoadRaster_OutOfMA)
simRoadPoints_OutOfMA = ppp(simRoadPoints_OutOfMA[,1], simRoadPoints_OutOfMA[,2], window = observationWindow)
simRoadPoints_InOfMA = rasterToPoints(reclasimRoadRaster_InOfMA)
simRoadPoints_InOfMA = ppp(simRoadPoints_InOfMA[,1], simRoadPoints_InOfMA[,2], window = observationWindow)
# Use nncross function to get the amount of sim road points that are < 500m from a real road point
crossSimRealRoads = nncross(simRoadPoints, realRoadPoints)
crossSimRealRoads$under500M = crossSimRealRoads$dist <= 500
frequencies = table(crossSimRealRoads$under500M)
percentageSimUnder500m = (frequencies[["TRUE"]] / sum(frequencies)) * 100
# We do the same for roads outside management areas
crossSimRealRoads_OutOfMA = nncross(simRoadPoints_OutOfMA, realRoadPoints_OutOfMA)
crossSimRealRoads_OutOfMA$under500M = crossSimRealRoads_OutOfMA$dist <= 500
frequencies_OutOfMA = table(crossSimRealRoads_OutOfMA$under500M)
percentageSimUnder500m_OutOfMA = (frequencies_OutOfMA[["TRUE"]] / sum(frequencies_OutOfMA)) * 100
# We do the same for roads inside management areas
crossSimRealRoads_InOfMA = nncross(simRoadPoints_InOfMA, realRoadPoints_InOfMA)
crossSimRealRoads_InOfMA$under500M = crossSimRealRoads_InOfMA$dist <= 500
frequencies_InOfMA = table(crossSimRealRoads_InOfMA$under500M)
percentageSimUnder500m_InOfMA = (frequencies_InOfMA[["TRUE"]] / sum(frequencies_InOfMA)) * 100
# Put all three values in three lists
percentagesSimUnder500m = c(percentagesSimUnder500m, percentageSimUnder500m)
percentagesSimUnder500m_OutOfMA = c(percentagesSimUnder500m_OutOfMA, percentageSimUnder500m_OutOfMA)
percentagesSimUnder500m_InOfMA = c(percentagesSimUnder500m_InOfMA, percentageSimUnder500m_InOfMA)
percentagesSimUnder500m = c()
percentagesSimUnder500m_OutOfMA = c()
percentagesSimUnder500m_InOfMA = c()
percentagesSimUnder500m = c(percentagesSimUnder500m, percentageSimUnder500m)
percentagesSimUnder500m_OutOfMA = c(percentagesSimUnder500m_OutOfMA, percentageSimUnder500m_OutOfMA)
percentagesSimUnder500m_InOfMA = c(percentagesSimUnder500m_InOfMA, percentageSimUnder500m_InOfMA)
percentagesSimUnder500m
percentagesSimUnder500m_OutOfMA
percentagesSimUnder500m_InOfMA
# Compute mean value for percentages of sim roads < 500m from real roads
meanPercentagesSimUnder500m = mean(percentagesSimUnder500m)
meanPercentagesSimUnder500m
percentagesSimUnder500m
# Compute SD value for percentages of sim roads < 500m from real roads
sdPercentagesSimUnder500m = sd(percentagesSimUnder500m)
sdPercentagesSimUnder500m
len(resultsDF)
lenght(resultsDF)
length(resultsDF)
length(resultsDF[,1])
library(raster)
library(rgeos)
library(here)
library(spatstat)
print("Detecting current directory...")
# We set the current working directory to where the file is (! DOESNT WORK IN R STUDIO)
# current_folder = here()
current_folder = "D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/"
setwd(current_folder)
# 2. PREPARING DATA FRAME
# Create data frame for results
resultsDF = data.frame(Landscape = character(), Roads_concerned = character(),
Mean_or_SD = character(), Value = character())
colnames(resultsDF) = c("Landscape", "Roads_concerned", "Mean_or_SD", "value")
# 3. LOOP FOR LANDSCAPES
# for each landscape
for (landscape in c("Mauricie", "Cote-nord"))
{
# landscape = "Mauricie"
# Define paths to load rasters for this landscape
pathSharedRasters = paste("./Paysage ", landscape, "/sharedRasters/", sep = "")
pathScenarios = paste("./Paysage ", landscape, "/Scenarios/", sep = "")
# load the management areas raster
if(file.exists(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller.tif", sep = "")))
{
managementAreasRaster = raster(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller.tif", sep = ""))
}  else if (file.exists(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller-Guillemette.tif", sep = "")))
{
managementAreasRaster = raster(paste(pathSharedRasters, "all_forest_operations_selected_near_roads_smaller-Guillemette.tif", sep = ""))
} else { print("FATAL ERROR : COULDN'T FIND THE RASTER OF MANAGEMENT AREAS") }
# define matrix for reclassification of road raster
reclass_vector_road <- c(-1, 0, NA,
0, Inf, 1)
reclass_matrix_road <- matrix(reclass_vector_road,
ncol = 3,
byrow = TRUE)
# load, reclassify and set the right extent for the real road raster
realRoadsRaster = raster(paste(pathScenarios, "Scenario routes semi-reelles/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclaRealRoadsRaster <- reclassify(realRoadsRaster, reclass_matrix_road)
reclaRealRoadsRaster = setExtent(reclaRealRoadsRaster, managementAreasRaster)
# plot(reclaRealRoadsRaster)
# plot(managementAreasRaster)
# Make a temp raster with real roads out of management areas
reclassifiedRoadRaster_OutOfMA = mask(reclaRealRoadsRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
# plot(reclassifiedRoadRaster_OutOfMA)
# Make a temp raster with real roads in of management areas
reclassifiedRoadRaster_InOfMA = mask(reclaRealRoadsRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
# plot(reclassifiedRoadRaster_InOfMA)
# Make the ppp objects for later use with the nncross function
observationWindow = owin(extent(reclaRealRoadsRaster)[1:2],extent(reclaRealRoadsRaster)[3:4])
realRoadPoints = rasterToPoints(reclaRealRoadsRaster)
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
realRoadPoints_OutOfMA = rasterToPoints(reclassifiedRoadRaster_OutOfMA)
realRoadPoints_OutOfMA = ppp(realRoadPoints_OutOfMA[,1], realRoadPoints_OutOfMA[,2], window = observationWindow)
realRoadPoints_InOfMA = rasterToPoints(reclassifiedRoadRaster_InOfMA)
realRoadPoints_InOfMA = ppp(realRoadPoints_InOfMA[,1], realRoadPoints_InOfMA[,2], window = observationWindow)
# Prepare the vector objects to fill during the loop for each simulated run
percentagesSimUnder500m = c()
percentagesSimUnder500m_OutOfMA = c()
percentagesSimUnder500m_InOfMA = c()
# 4. LOOP FOR REPLICATES
for (replicate in c(1:10))
{
# replicate = 2
# load the simulated road raster and give it the right reclassification and extent
simRoadRaster = raster(paste(pathScenarios, "Scenario routes simulees ", replicate, "/output/disturbances/roads/roadNetwork-10.tif", sep = ""))
reclasimRoadRaster <- reclassify(simRoadRaster, reclass_matrix_road)
reclasimRoadRaster = setExtent(reclasimRoadRaster, managementAreasRaster)
# Make a temp raster with Simulated roads out of management areas
reclasimRoadRaster_OutOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = 1, updatevalue = NA)
# Make a temp raster with Simulated roads in of management areas
reclasimRoadRaster_InOfMA = mask(reclasimRoadRaster, managementAreasRaster, maskvalue = NA, updatevalue = NA)
# Make the ppp objects for later use with the nncross function
simRoadPoints = rasterToPoints(reclasimRoadRaster)
simRoadPoints = ppp(simRoadPoints[,1], simRoadPoints[,2], window = observationWindow)
simRoadPoints_OutOfMA = rasterToPoints(reclasimRoadRaster_OutOfMA)
simRoadPoints_OutOfMA = ppp(simRoadPoints_OutOfMA[,1], simRoadPoints_OutOfMA[,2], window = observationWindow)
simRoadPoints_InOfMA = rasterToPoints(reclasimRoadRaster_InOfMA)
simRoadPoints_InOfMA = ppp(simRoadPoints_InOfMA[,1], simRoadPoints_InOfMA[,2], window = observationWindow)
# Use nncross function to get the amount of sim road points that are < 500m from a real road point
crossSimRealRoads = nncross(simRoadPoints, realRoadPoints)
crossSimRealRoads$under500M = crossSimRealRoads$dist <= 500
frequencies = table(crossSimRealRoads$under500M)
percentageSimUnder500m = (frequencies[["TRUE"]] / sum(frequencies)) * 100
# We do the same for roads outside management areas
crossSimRealRoads_OutOfMA = nncross(simRoadPoints_OutOfMA, realRoadPoints_OutOfMA)
crossSimRealRoads_OutOfMA$under500M = crossSimRealRoads_OutOfMA$dist <= 500
frequencies_OutOfMA = table(crossSimRealRoads_OutOfMA$under500M)
percentageSimUnder500m_OutOfMA = (frequencies_OutOfMA[["TRUE"]] / sum(frequencies_OutOfMA)) * 100
# We do the same for roads inside management areas
crossSimRealRoads_InOfMA = nncross(simRoadPoints_InOfMA, realRoadPoints_InOfMA)
crossSimRealRoads_InOfMA$under500M = crossSimRealRoads_InOfMA$dist <= 500
frequencies_InOfMA = table(crossSimRealRoads_InOfMA$under500M)
percentageSimUnder500m_InOfMA = (frequencies_InOfMA[["TRUE"]] / sum(frequencies_InOfMA)) * 100
# Put all three values in three lists
percentagesSimUnder500m = c(percentagesSimUnder500m, percentageSimUnder500m)
percentagesSimUnder500m_OutOfMA = c(percentagesSimUnder500m_OutOfMA, percentageSimUnder500m_OutOfMA)
percentagesSimUnder500m_InOfMA = c(percentagesSimUnder500m_InOfMA, percentageSimUnder500m_InOfMA)
}
# Once all simulated road rasters have been checked
# Compute mean value for percentages of sim roads < 500m from real roads
meanPercentagesSimUnder500m = mean(percentagesSimUnder500m)
# Compute SD value for percentages of sim roads < 500m from real roads
sdPercentagesSimUnder500m = sd(percentagesSimUnder500m)
# Compute mean value for percentages of sim roads < 500m from real roads out of management areas
meanpercentagesSimUnder500m_OutOfMA = mean(percentagesSimUnder500m_OutOfMA)
# Compute SD value for percentages of sim roads < 500m from real roads out of management areas
sdpercentagesSimUnder500m_OutOfMA = sd(percentagesSimUnder500m_OutOfMA)
# Compute mean value for percentages of sim roads < 500m from real roads in management areas
meanpercentagesSimUnder500m_InOfMA = mean(percentagesSimUnder500m_InOfMA)
# Compute SD value for percentages of sim roads < 500m from real roads in management areas
sdpercentagesSimUnder500m_InOfMA = sd(percentagesSimUnder500m_InOfMA)
# Add all of this into dataframe
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "All","Mean",meanPercentagesSimUnder500m)
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "All","SD",sdPercentagesSimUnder500m)
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "OutOfMA","Mean",meanpercentagesSimUnder500m_OutOfMA)
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "OutOfMA","SD",sdpercentagesSimUnder500m_OutOfMA)
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "InOfMA","Mean",meanpercentagesSimUnder500m_InOfMA)
resultsDF[length(resultsDF[,1]) + 1,] =  c(landscape, "InOfMA","SD",sdpercentagesSimUnder500m_InOfMA)
}
# 5. EXPORT OF RESULTS
print(resultsDF)
write.csv(resultsDF, "./percentages_simroads_near_realroads.csv", row.names = FALSE)
library(raster)
library(rgeos)
library(here)
library(spatstat)
print("Detecting current directory...")
# We set the current working directory to where the file is (! DOESNT WORK IN R STUDIO)
# current_folder = here()
current_folder = "D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/"
setwd(current_folder)
# Load the initial road raster for the cote-nord landscape and reclassify it
reclass_vector_road <- c(-1, 0, NA,
0, Inf, 1)
reclass_matrix_road <- matrix(reclass_vector_road,
ncol = 3,
byrow = TRUE)
realRoadsCoteNord = raster("/Paysage Cote-Nord/Scenarios/Scenario routes semi-reelles/output/disturbances/roads/roadNetwork-10.tif")
reclaRealRoadsCoteNord <- reclassify(realRoadsCoteNord, reclass_matrix_road)
library(raster)
library(rgeos)
library(here)
library(spatstat)
print("Detecting current directory...")
# We set the current working directory to where the file is (! DOESNT WORK IN R STUDIO)
# current_folder = here()
current_folder = "D:/OneDrive -UQAM/OneDrive - UQAM/1 - Projets/These - Article du module FRS/Test du module v4.0/"
setwd(current_folder)
# Load the initial road raster for the cote-nord landscape and reclassify it
reclass_vector_road <- c(-1, 0, NA,
0, Inf, 1)
reclass_matrix_road <- matrix(reclass_vector_road,
ncol = 3,
byrow = TRUE)
realRoadsCoteNord = raster("/Paysage Cote-Nord/Scenarios/Scenario routes semi-reelles/output/disturbances/roads/roadNetwork-10.tif")
realRoadsCoteNord = raster("./Paysage Cote-Nord/Scenarios/Scenario routes semi-reelles/output/disturbances/roads/roadNetwork-10.tif")
reclaRealRoadsCoteNord <- reclassify(realRoadsCoteNord, reclass_matrix_road)
observationWindow = owin(extent(reclaRealRoadsCoteNord)[1:2],extent(reclaRealRoadsCoteNord)[3:4])
realRoadPoints = rasterToPoints(reclaRealRoadsCoteNord)
realRoadPoints = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
plot(realRoadPoints)
plot(realRoadPoints, main=NULL, cols=rgb(0,0,0,.2), pch=20)
Q <- quadratcount(realRoadPoints, nx= 6, ny=3)
plot(Q, add=TRUE)  # Add quadrat grid
Q <- quadratcount(realRoadPoints, nx= 30, ny=50)
plot(intensity(Q, image=TRUE), main=NULL, las=1)  # Plot density raster
Q <- quadratcount(realRoadPoints, nx= 60, ny=100)
plot(intensity(Q, image=TRUE), main=NULL, las=1)  # Plot density raster
ANN <- apply(nndist(realRoadPoints, k=1:100),2,FUN=mean)
plot(ANN ~ eval(1:100), type="b", main=NULL, las=1)
ANN
hist(ANN)
nearestDistanceBetweenRoadPixels = nndist(realRoadPoints)
nearestDistanceBetweenRoadPixels
hist(nearestDistanceBetweenRoadPixels)
hist(nearestDistanceBetweenRoadPixels, log="y")
hist(log(nearestDistanceBetweenRoadPixels))
hist(log(nearestDistanceBetweenRoadPixels))
hist = hist(nearestDistanceBetweenRoadPixels, plot=F)
hist.data$counts = log10(hist.data$counts)
plot(hist.data, ylab='log10(Frequency)')
hist = hist(nearestDistanceBetweenRoadPixels, plot=F)
hist.data$counts = log10(hist.data$counts)
hist$counts = log10(hist.data$counts)
hist$counts = log10(hist$counts)
plot(hist.data, ylab='log10(Frequency)')
plot(hist, ylab='log10(Frequency)')
hist = hist(nearestDistanceBetweenRoadPixels, plot=F)
hist$counts = log10(hist$counts)
plot(hist, ylab='log10(Frequency)')
hist$counts
hist = hist(nearestDistanceBetweenRoadPixels, plot=F)
hist
Q
hist(Q)
hist(Q, breaks = 30)
hist(Q, breaks = 50)
hist(Q, breaks = 200)
Q
hist(Q, breaks = c(1,500,1000,2000))
hist(Q, breaks = c(1,500,1000,2000))
hist(Q, breaks = c(1,500,1000,2000))
hist(Q, breaks = c(1,500,1000,2000,100000000000))
hist(Q, breaks = c(1,500,1000,2000,1000000000000000000000000))
hist(Q, breaks = c(1,500,1000))
hist(Q, breaks = c(1,500))
hist(Q, breaks = c(1,100))
hist(Q, breaks = c(1,2))
hist(Q, breaks = c(1,1.3,2,4,5,7))
listOFQ = list(Q)
listOFQ
as.vector(Q)
quadratVector = as.vector(Q)
quadratVector = quadratVector[quadratVector != 0]
quadratVector
hist(quadratVector)
# Beautiful heatmap raster, from https://mgimond.github.io/Spatial/point-pattern-analysis-in-r.html
Q <- quadratcount(realRoadPoints, nx= 20, ny=50)
quadratVector = as.vector(Q)
quadratVector = quadratVector[quadratVector != 0]
hist(quadratVector)
quadratVector
# Beautiful heatmap raster, from https://mgimond.github.io/Spatial/point-pattern-analysis-in-r.html
Q <- quadratcount(realRoadPoints, nx= 60, ny=100)
quadratVector = as.vector(Q)
quadratVector = quadratVector[quadratVector != 0]
hist(quadratVector)
hist(quadratVector, breaks = c(1, 100, 200, 1000))
hist(quadratVector)
realRoadPoints
reclaRealRoadsCoteNord)[1:2]
(reclaRealRoadsCoteNord)[1:2]
reclaRealRoadsCoteNord
extent(reclaRealRoadsCoteNord)[1:2]
range(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution)
resolution = 100
range(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution)
seq(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution)
observationWindow = owin(extent(reclaRealRoadsCoteNord)[1:2],extent(reclaRealRoadsCoteNord)[3:4])
realRoadPoints = rasterToPoints(reclaRealRoadsCoteNord)
realRoadPointsPPP = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
realRoadPointsPPP
count(realRoadPointsPPP)
realRoadPointsPPP$n
observationWindow = owin(extent(reclaRealRoadsCoteNord)[1:2],extent(reclaRealRoadsCoteNord)[3:4])
realRoadPoints = rasterToPoints(reclaRealRoadsCoteNord)
realRoadPointsPPP = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationWindow)
# Beautiful heatmap raster, from https://mgimond.github.io/Spatial/point-pattern-analysis-in-r.html
Q <- quadratcount(realRoadPoints, nx= 60, ny=50)
quadratVector = as.vector(Q)
quadratVector = quadratVector[quadratVector != 0]
hist(quadratVector)
# Moving window...?
densityMovingWindowVector = c()
resolution = 100
for (x in seq(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution))
{
for (y in seq(extent(reclaRealRoadsCoteNord)[3], extent(reclaRealRoadsCoteNord)[4] - resolution, resolution))
{
observationMovingWindow = owin(x, x + 100, y, y + 100)
movingRealRoadPointsPPP = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationMovingWindow)
densityMovingWindowVector = c(densityMovingWindowVector, movingRealRoadPointsPPP$n)
}
}
owin(x, x + 100, y, y + 100)
x
observationMovingWindow = owin(c(x, x + 100), c(y, y + 100))
densityMovingWindowVector = c()
resolution = 100
for (x in seq(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution))
{
for (y in seq(extent(reclaRealRoadsCoteNord)[3], extent(reclaRealRoadsCoteNord)[4] - resolution, resolution))
{
observationMovingWindow = owin(c(x, x + 100), c(y, y + 100))
movingRealRoadPointsPPP = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationMovingWindow)
densityMovingWindowVector = c(densityMovingWindowVector, movingRealRoadPointsPPP$n)
}
}
warnings()
densityMovingWindowVector
densityMovingWindowVector = c()
resolution = 2000
for (x in seq(extent(reclaRealRoadsCoteNord)[1], extent(reclaRealRoadsCoteNord)[2] - resolution, resolution))
{
for (y in seq(extent(reclaRealRoadsCoteNord)[3], extent(reclaRealRoadsCoteNord)[4] - resolution, resolution))
{
observationMovingWindow = owin(c(x, x + resolution), c(y, y + resolution))
movingRealRoadPointsPPP = ppp(realRoadPoints[,1], realRoadPoints[,2], window = observationMovingWindow)
densityMovingWindowVector = c(densityMovingWindowVector, movingRealRoadPointsPPP$n)
}
}
